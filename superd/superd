#!/bin/bash
# Paco Li: 2016-3-4 
# chkconfig: 345 90 13
# description: supervisor contol script for PS-OCG

# it is important to load ocg environment
. /etc/profile
. /lib/lsb/init-functions

base=/usr/local/bin
supervisorctl=${base}/supervisorctl
supervisord=${SUPERVISORD-${base}/supervisord}
prog=supervisord
pidfile=${PIDFILE-/var/run/supervisord.pid}
lockfile=${LOCKFILE-/var/lock/supervisord}
STOP_TIMEOUT=${STOP_TIMEOUT-20}
OPTIONS="${OPTIONS--c /etc/super.conf}"
RETVAL=0

start() {
    echo -n $"Starting $prog: "
    #ulimit -c unlimited
    start_daemon -p ${pidfile} $supervisord $OPTIONS
    RETVAL=$?
    echo
    if [ $RETVAL -eq 0 ]; then
        touch ${lockfile}
        $supervisorctl $OPTIONS status
    fi
    return $RETVAL
}

stop() {
    echo $"Stopping $prog: "
    pid=`cat ${pidfile} 2>/dev/null`
    if [ -n $pid ] ; then
        if status_of_proc -p ${pidfile} $supervisord >dev/null 2>&1; then
            echo  $"killing pid:${pid} "
            kill -TERM $pid >/dev/null 2>&1
            for ((i=1; i<180; i++)); do
                if status_of_proc -p ${pidfile} $supervisord >/dev/null 2>&1; then
                    sleep 1
                    echo -n "*"
                else
                    rm ${lockfile}
                    echo "success"
                    return 0
                fi
            done
            #try to kill -9 supervisord and all child procss
            export TMP_PID=`echo ${pid}`
            child_pids='/tmp/super_children.pid'
            ps -ef|perl -ne '@l=split/\s+/;if($l[2]==$ENV{"TMP_PID"}){printf("kill -KILL %s\n", $l[1]);}' > ${child_pids}
            echo -n $"timeout wait for pid:$pid to terminate, kill -9 it"
            kill -KILL $pid >/dev/null 2>&1
            sh ${child_pids}
            usleep 100000
            warning
        else
            echo "success"
            return 0
        fi
    else
        echo "cannot read pid from ${pidfile}, maybe service is not running"
        return 1
    fi
    RC=$?
    echo
    return ${RC}
}


reload() {
    echo -n $"Reloading $prog: "
    LSB=1 killproc -p $pidfile $supervisord -HUP
    RETVAL=$?
    echo
    if [ $RETVAL -eq 7 ]; then
        failure $"$prog reload"
    else
        $supervisorctl $OPTIONS status
    fi
}

restart() {
    stop
    start
}

if [ $# = 1 ]; then
    case "$1" in
        start)
            status_of_proc -p ${pidfile} $supervisord
            RETVAL=$?
            if [ $RETVAL -eq 0 ]; then
                echo "already started"
            else
                start
            fi
            ;;
        stop)
            stop
            ;;
        status|reread|update)
            status_of_proc -p ${pidfile} $supervisord
            RETVAL=$?
            [ $RETVAL -eq 0 ] && $supervisorctl $OPTIONS $1
            ;;
        restart)
            restart
            ;;
        condrestart|try-restart)
            if status_of_proc -p ${pidfile} $supervisord >&/dev/null; then
              stop
              start
            fi
            ;;
        force-reload|reload)
            reload
            ;;
        *)
            echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload|status_of_proc|reread|update}"
            RETVAL=2
    esac
elif [ $# = 2 ]; then
    status_of_proc -p ${pidfile} $supervisord
    RETVAL=$?
    [ $RETVAL -eq 0 ] && $supervisorctl $OPTIONS $1 $2
else
    echo $"Usage: $prog {start|stop|restart|condrestart|try-restart|force-reload|reload|status|reread|update}"
    RETVAL=2
fi

exit $RETVAL
